{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["firstDate","Date","MainContainer","styled","div","ControlPanel","ChartContainer","VillagerBar","chartRowHeight","VillagerIcon","back","css","ChartRow","farRight","BarLine","DatePrint","DatePopup","DateSlider","DateBead","active","App","useState","dataSets","setDataSets","isLoading","setIsLoading","viewIndex","setViewIndex","autoRun","setAutoRun","useEffect","now","checkDate","date","fileName","getFullYear","getMonth","getDate","filePath","process","fetch","then","r","json","datesToFetch","pivotDate","pivotDateDataPath","push","path","setDate","resolvedCount","incrementResolution","length","Promise","all","map","dateItem","responses","forEach","rIndex","j","prevDataSets","data","catch","console","log","url","prevDate","sortedDataSets","sort","a","b","visibleDataset","useMemo","sortedVillagerNames","Object","entries","i","changeViewIndex","newViewIndex","autoplay","highestCount","highestScale","autoMoveTimeout","useRef","style","position","bottom","right","whiteSpace","onClick","Math","max","min","textAlign","toDateString","ds","dsIndex","key","height","itemIndex","value","vData","villagersData","sortIndex","indexOf","shiftPercent","transform","onTransitionEnd","clearTimeout","current","setTimeout","undefined","background","name","backgroundImage","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.24868df7.chunk.js","sourcesContent":["import React, { useEffect, useState, useMemo, useRef } from 'react';\nimport styled, { css } from 'styled-components';\n\nimport villagersData from './data/villagers.json';\ntype VillagerName = keyof typeof villagersData;\n\ninterface Data {\n  [key: string]: number;\n}\ninterface DataSet {\n  date: Date;\n  data: Data;\n}\n\nconst chartRowHeight = 30;\n\nconst firstDate = new Date('2020/03/21');\nfunction App() {\n  const [dataSets, setDataSets] = useState([] as DataSet[]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [viewIndex, setViewIndex] = useState(0);\n  const [autoRun, setAutoRun] = useState(false);\n\n  useEffect(() => {\n    const now = new Date();\n    const todayDate = new Date(`${now.getFullYear()}/${now.getMonth()+1}/${now.getDate()}`);\n    const checkDate = (date: Date) => {\n      const fileName = `${date.getFullYear()}_${date.getMonth() + 1}_${date.getDate()}`;\n      const filePath = `${process.env.PUBLIC_URL}/data/${fileName}.json`;\n      fetch(filePath).then(r => r.json()).then(() => {\n        const datesToFetch = [] as Array<{\n          date: Date,\n          path: string,\n        }>;\n        const pivotDate = new Date(date);\n        while(pivotDate >= firstDate) {\n          const pivotDateDataPath = `${process.env.PUBLIC_URL}/data/${pivotDate.getFullYear()}_${pivotDate.getMonth() + 1}_${pivotDate.getDate()}.json`;\n          datesToFetch.push({\n            path: pivotDateDataPath,\n            date: new Date(pivotDate),\n          });\n          pivotDate.setDate(pivotDate.getDate() - 1);\n        }\n        let resolvedCount = 0;\n        const incrementResolution = () => {\n          resolvedCount += 1;\n          if (resolvedCount >= datesToFetch.length) {\n            setIsLoading(false);\n          }\n        };\n        Promise.all(datesToFetch.map(dateItem => {\n          return fetch(dateItem.path);\n        })).then(responses => {\n          responses.forEach((r, rIndex) => {\n            r.json().then(j => {\n              incrementResolution();\n              setDataSets((prevDataSets) => {\n                return [\n                  ...prevDataSets,\n                  {\n                    date: datesToFetch[rIndex].date,\n                    data: j,\n                  },\n                ];\n              });\n            }).catch(() => {\n              incrementResolution();\n              console.log(r.url + ' failed');\n            });\n          });\n        });\n      }).catch(() => {\n        const prevDate = new Date(date);\n        prevDate.setDate(prevDate.getDate() - 1);\n        checkDate(prevDate);\n      });\n    };\n    checkDate(todayDate);\n  }, []);\n\n  const sortedDataSets = dataSets.sort((a, b) => {\n    return a.date > b.date ? 1 : -1;\n  });\n  const visibleDataset = useMemo(() => {\n    return sortedDataSets[viewIndex];\n  }, [viewIndex, sortedDataSets]);\n  const sortedVillagerNames = useMemo(() => {\n    if (!visibleDataset) {\n      return [];\n    }\n    const thisSortedVillagerNames = Object.entries(visibleDataset.data).sort((a, b) => {\n      if (a[1] === b[1]) {\n        return a[0] > b[0] ? 1 : -1;\n      }\n      return a[1] > b[1] ? -1 : 1;\n    }).map(i => i[0]);\n    return thisSortedVillagerNames\n  }, [visibleDataset]);\n\n  const changeViewIndex = (newViewIndex: number, autoplay?: boolean) => {\n    if (autoRun && autoplay) {\n      setAutoRun(false);\n      return;\n    }\n    if (newViewIndex > viewIndex && autoplay) {\n      setAutoRun(true);\n    } else {\n      setAutoRun(false);\n    }\n    setViewIndex(newViewIndex);\n  };\n\n  const highestCount = visibleDataset?.data[sortedVillagerNames?.[0]] || 1;\n  const highestScale = 50 + (50 * (viewIndex + 1) / dataSets.length);\n  const autoMoveTimeout = useRef(0);\n  return (\n    <MainContainer>\n      <ControlPanel>\n        {isLoading && <div style={{\n          position: 'absolute',\n          bottom: '100%',\n          right: 0,\n          whiteSpace: 'nowrap',\n        }}>loading... {dataSets.length} data files</div>}\n        {viewIndex > 1 && <button onClick={() => { changeViewIndex(0); }}>first</button>}\n        <button onClick={() => { changeViewIndex(Math.max(0, viewIndex - 1)); }}>prev</button>\n        <button onClick={() => { changeViewIndex(Math.min(dataSets.length - 1, viewIndex + 1)); }}>next</button>\n        {viewIndex < dataSets.length - 2 && <button onClick={() => { changeViewIndex(dataSets.length - 1); }}>last</button>}\n        <button onClick={() => { changeViewIndex(Math.min(dataSets.length - 1, viewIndex + 1), true); }}>{autoRun ? 'stop' : 'play'}</button>\n        <DatePrint style={{ textAlign: 'center' }}>\n          {visibleDataset && visibleDataset.date.toDateString()}\n        </DatePrint>\n        <DateSlider>\n          {sortedDataSets.map((ds, dsIndex) => {\n            const date = ds.date;\n            return <div\n              key={dsIndex}\n            >\n              <DatePopup>\n                {`${date.getFullYear()}/${date.getMonth() + 1}/${date.getDate()}`}\n              </DatePopup>\n              <DateBead\n                onClick={() => {\n                  setViewIndex(dsIndex);\n                }}\n                active={dsIndex === viewIndex}\n              />\n            </div>\n          })}\n        </DateSlider>\n      </ControlPanel>\n      {!isLoading && <ChartContainer style={{\n        height: chartRowHeight * (sortedVillagerNames.length + 1),\n      }}>\n        {visibleDataset && Object.entries(visibleDataset.data).map(([key, value], itemIndex) => {\n          const vData = villagersData[key as VillagerName];\n          if (!vData) {\n            return null;\n          }\n          const sortIndex = sortedVillagerNames.indexOf(key);\n          const shiftPercent = value / highestCount * highestScale;\n          return <ChartRow\n            key={key}\n            style={{\n              transform: `\n                translateY(${chartRowHeight + sortIndex * chartRowHeight}px)\n                translateX(${shiftPercent}%)\n                translateX(${chartRowHeight / 2}px)\n              `,\n            }}\n            farRight={shiftPercent > 80}\n            onTransitionEnd={itemIndex === 0 ? () => {\n              if (autoRun && viewIndex < dataSets.length - 1) {\n                clearTimeout(autoMoveTimeout.current);\n                autoMoveTimeout.current = setTimeout(() => {\n                  setViewIndex(viewIndex + 1);\n                }, 50);\n              } else {\n                setAutoRun(false);\n              }\n            } : undefined}\n          >\n            <BarLine\n              style={{\n                background: `rgb(\n                  ${value/highestCount*255},\n                  ${255 - value/highestCount*255},\n                  0\n                )`,\n              }}\n            />\n            <VillagerBar>\n              <div>\n                {sortIndex + 1}.\n              </div>\n              <div>\n                <div>\n                  {sortIndex === 0 && vData.name === 'Raymond' && 'Fucking '}\n                  {vData.name}\n                </div>\n                <div>\n                  {value}\n                </div>\n              </div>\n            </VillagerBar>\n            <VillagerIcon\n              style={{\n                backgroundImage: `url(${process.env.PUBLIC_URL}/img/villagers/${vData?.id}.png)`,\n              }}\n            />\n          </ChartRow>;\n        })}\n      </ChartContainer>}\n    </MainContainer>\n  );\n}\n\nconst MainContainer = styled.div`\n  font-family: sans-serif;\n  font-size: 12px;\n  width: 90vw;\n  overflow: hidden;\n`;\n\nconst ControlPanel = styled.div`\n  position: fixed;\n  right: 10px;\n  bottom: 40px;\n  z-index: 1;\n  background: rgba(255, 255, 255, 0.8);\n  padding: 10px;\n`;\n\nconst ChartContainer = styled.div`\n  position: relative;\n  margin: 20px;\n  overflow: hidden;\n`;\n\nconst transitionDur = 1;\nconst VillagerBar = styled.div`\n  font-size: 10px;\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%) translateX(${chartRowHeight / 2}px);\n  display: flex;\n  left: 0;\n  transition: transform ${transitionDur}s;\n\n  > div {\n    padding-right: 4px;\n  }\n`;\n\ninterface VillagerIconProps {\n  back?: boolean;\n}\nconst VillagerIcon = styled.div<VillagerIconProps>`\n  display: inline-block;\n  vertical-align: middle;\n  width: ${chartRowHeight}px;\n  height: ${chartRowHeight}px;\n  position: absolute;\n  top: 0;\n  left: 0;\n  background-repeat: no-repeat;\n  background-position: center left;\n  background-size: contain;\n  transform: translateX(-50%);\n\n  ${({ back }) => back && css`\n    width: ${chartRowHeight + 10}px;\n    height: ${chartRowHeight + 10}px;\n    transform: translateX(-50%) translateY(-5px);\n    filter: invert(1);\n  `}\n`;\n\ninterface ChartRowProps {\n  farRight: boolean;\n}\nconst ChartRow = styled.div<ChartRowProps>`\n  height: ${chartRowHeight}px;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 95%;\n  transition: transform ${transitionDur}s;\n\n  span {\n    vertical-align: middle;\n  }\n\n  ${({ farRight }) => farRight && css`\n    ${VillagerBar} {\n      transform: translateY(-100%) translateX(-100%) translateX(${-chartRowHeight / 2}px);\n    }\n  `}\n`;\n\nconst BarLine = styled.div`\n  height: 5px;\n  width: 110%;\n  background: #c00;\n  position: absolute;\n  top: 50%;\n  right: 100%;\n  transition: background ${transitionDur}s;\n  opacity: 0.5;\n`;\n\nconst DatePrint = styled.div`\n  font-size: 20px;\n`;\n\nconst timelineColor = '#88d';\n\nconst DatePopup = styled.div`\n  position: absolute;\n  top: 0;\n  left: 50%;\n  padding: 2px 4px;\n  background: rgba(255, 255, 255, 0.9);\n  border: solid 2px ${timelineColor};\n  border-radius: 4px;\n  font-size: 10px;\n  transition: transform 0.2s;\n  transform: translateX(-50%) translateY(-110%) scale(0);\n`;\n\nconst DateSlider = styled.div`\n  display: flex;\n  position: absolute;\n  right: 0;\n  top: 100%;\n  max-width: 90vw;\n\n  &::before {\n    content: '';\n    display: block;\n    z-index: 0;\n    width: 100%;\n    height: 2px;\n    position: absolute;\n    top: 50%;\n    transform: translateY(-50%);\n    box-sizing: border-box;\n    border: solid 2px transparent;\n    border-color: ${timelineColor} transparent;\n    border-width: 1px 5px;\n  }\n\n  > div {\n    position: relative;\n    z-index: 1;\n\n    &:hover {\n      ${DatePopup} {\n        transform: translateX(-50%) translateY(-110%);\n      }\n    }\n  }\n`;\n\ninterface DateBeadProps {\n  active?: boolean;\n}\nconst DateBead = styled.div<DateBeadProps>`\n  width: 8px;\n  height: 8px;\n  border-radius: 8px;\n  background: #fff;\n  box-sizing: border-box;\n  border: solid 2px ${timelineColor};\n  margin: 0 1px;\n  cursor: pointer;\n\n  &:hover {\n    background: #aac;\n  }\n\n  ${({ active }) => active && css`\n    background: ${timelineColor};\n  `}\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}